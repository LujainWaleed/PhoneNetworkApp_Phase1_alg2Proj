/*
- algorthim project part'1'
- group 13
- members:
- Raghad Ahmed "B8"
- Manar Alnahdi	"B0B"
- Lujain Aljahdali "B0B"
- Alanood Alotaibi "B0A"
*/
package PhoneNetworkApp;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import GraphFramework.*;



public class PhoneNWDesignApp {
public static void main(String[] args) throws FileNotFoundException{
               
    //print header stetments
    System.out.println("\t---------------------------------------------------------------\n"
                      +"\t|     Minimum Spanning Tree Algorithms Run Time Comparison    |\n"
                      +"\t| This program will compare between Kruskal & Prim Algorithms |\n"
                      +"\t---------------------------------------------------------------");
    System.out.println("\t 1. Requirement 1: Read gragh from file \n"
                      +"\t 2. Requirement 2: Make gragh \n");

    //create Scanner object to read from user
    Scanner input= new Scanner(System.in); 

    //ask user to enter his\her choice
    System.out.print("\t> Enter your choice: ");
    int userChoice= input.nextInt();

    //if user enter wrong choice ask him\her to enter again
    while( userChoice!=2 && userChoice!=1){
        System.out.println("\t  Wrong choice!");
        System.out.print("\t> Enter your choice: ");
        userChoice= input.nextInt(); }

    //create 2 objects for kruskal& prim algorithms
    MHPrimAlg MSTPrim;
    KruskalAlg MSTKrs; 

    //if user choose requirement'1' 
    if( userChoice==1 ){
        System.out.println("\n\n\t***** Requirement 1: Read gragh from file *****");

        //create file object
        File graphFile= new File("graphFile.txt");

        //check if file exist or not
        if( !graphFile.exists() ){
            System.out.println("The file does not exist!");
            System.exit(0); }

        //create BluePrintGraph object then call readGraphFromFile method
        Graph phoneNetwork= new BluePrintGraph();
        phoneNetwork.readGraphFromFile(graphFile);


       //using kurskal algorithm          
       System.out.println("\nThe Phone Network(minimum spanning tree) generated by Kruskal algorithm is as follows:");

       //read graph in kruskal Algoirthm then display info.&cost for MST-kruskal
       MSTKrs= new KruskalAlg(phoneNetwork);
       MSTKrs.kruskal();
       MSTKrs.displayResultingMST(); 
       MSTKrs.displayMSTcost(); 


       //using prim algorithm
       System.out.println("\n-------------------------------------------------------------------------");
       System.out.println("\nThe Phone Network(minimum spanning tree) generated by min-heap based Prim algorithm is as follows:");

       //read graph in prim algorithm then display info.&cost for MST-prim
       MSTPrim= new MHPrimAlg(phoneNetwork);
       MSTPrim.MHPrim();
       MSTPrim.displayResultingMST(); 
       MSTPrim.displayMSTcost(); 
    }


    //if user choose requirement'2' 
    else if( userChoice==2 ){

        //print header of requirement'2'
        System.out.println("\n\n\t ***** Requirement 2: Make gragh  *****\n");       
        System.out.println("Choice one of the Cases to test(Vertcies(n) and Edges(m)):");
        System.out.println("1. n=1000  , m=10000\n2. n=1000  , m=15000\n3. n=1000  , m=25000"
                          +"\n4. n=5000  , m=15000\n5. n=5000  , m=25000"+ "\n6. n=10000 , m=15000\n7. n=10000 , m=25000");

        //create 2 variables for number of edges &vertices
        int numOfVertices= 0;
        int numOfEdges= 0; 

        //ask user to enter his\her choice the make do-while for choices
        System.out.print("\n> Enter your choice: ");
        do {//read from user
            userChoice= input.nextInt();
	      if ( userChoice==1 ){	         
	              numOfVertices= 1000;
	              numOfEdges= 10000; }
              
              else if( userChoice==2 ){
	              numOfVertices= 1000;
	              numOfEdges= 15000; }
	              
	          else if( userChoice==3 ){
	              numOfVertices= 1000;
	              numOfEdges= 25000; }
	              
	          else if( userChoice==4 ){
	              numOfVertices= 5000;
	              numOfEdges= 15000; }
	              
	          else if( userChoice==5 ){
	              numOfVertices= 5000;
	              numOfEdges= 25000; }
	             
	          else if( userChoice==6 ){
	              numOfVertices= 10000;
	              numOfEdges= 15000; }
	              
	          else if( userChoice==7 ){
	              numOfVertices= 10000;
	              numOfEdges= 25000; }
	              	
                  else{ 
                      //if user enter wrong choice ask him\her to enter again
	              System.out.println("  incorrecet choice!");
	              System.out.print("> Enter your choice: "); }
              
        }while( userChoice<1 || userChoice>7 );

        
        //create BluePrintGraph Object then call makeGraph method
        BluePrintGraph phoneNetwork= new BluePrintGraph(numOfVertices ,numOfEdges ,false);  
        phoneNetwork.makeGraph(numOfVertices ,numOfEdges); 

        System.out.println("\n\n*** All results based on generated undirected graphs ***\n");

        //using kurskal algorithm                    
        System.out.println("The Phone Network(minimum spanning tree) generated by Kruskal algorithm is as follows:");

        //deal with kruskal as MST object then compute MST result & running time after print MST-cost in kruskal 
        MSTKrs= new KruskalAlg(phoneNetwork);          
        long krsStart= System.currentTimeMillis();  
        MSTKrs.kruskal();  
        long krsEnd= System.currentTimeMillis();  
        MSTKrs.displayMSTcost();
        System.out.println("Running time for Kruskal Algorithm is: "+ ( krsEnd-krsStart ) );


        //using prim algorithm                    
        System.out.println("\n-------------------------------------------------------------------------");
        System.out.println("\nThe Phone Network(minimum spanning tree) generated by min-heap based Prim algorithm is as follows:");

        //deal with prim as MST object then compute MST result & running time after print MST-cost in prim 
        MSTPrim= new MHPrimAlg(phoneNetwork);
        long PrimStart= System.currentTimeMillis();
        MSTPrim.MHPrim();
        long PrimEnd= System.currentTimeMillis(); 
        MSTPrim.displayMSTcost();
        System.out.println("Running time for min-heap Prim Algorithm is: "+ ( PrimEnd-PrimStart ) );
    }

    
    //close file
    input.close();
    System.out.println("\n\nThank you :)");       
}

}
